include "buzz_includes/buzz_utils/vec2.bzz"
include "config/search_example/parameters.bzz"
include "buzz_includes/search_example/belief_search.bzz"
include "buzz_includes/debug.bzz"

var found_gps
var nb_step = 0
var waiting_log = 1

var cur_bid_info = {.position = {}, .id_bid = 0, .last = 0}
var current_target = {}
var networkers_positions = {}
var initial_nb_networkers = -1

var count_broadcast = 0
var count_broadcast_winner = 0
var current_best_bid = {.value = -1.0, .rid = -1}
var winners_acks = {}
var state_duration = 0


function init_stigmergies() {
  target_stigmergy = stigmergy.create(1)
  root_id_stigmergy = stigmergy.create(2)
  if ( id == 0 ) {
    target_stigmergy.put("found_targets", found_targets)
    root_id_stigmergy.put("root_id", -1)
  }
  target_stigmergy.onconflict(function(k, l, r){
    return l
  })
  target_stigmergy.onconflictlost(function(k, l){})

  map_stigmergy = stigmergy.create(3)
  map_stigmergy.onconflict(function(k, l, r){
    return l
  })
  map_stigmergy.onconflictlost(function(k, l){})
}

function init_listeners() {
  neighbors.listen(NETWORKERS_NEEDED_EVENT, function(vid, value, rid) {
    if (current_state == STATE_SEARCH or current_state == STATE_MEETING or current_state == STATE_WAIT_FOR_BID) {
      # get position for the bid
      cur_bid_info.position = value.position
      cur_bid_info.id_bid = value.id_bid
      cur_bid_info.last = value.last
      current_state = STATE_NETWORKER_BIDDING
    }
  })
}

# Executed at init time
function init() {
  # Take off command for the Spiri drone model
  takeoff()

  # Show trajectory for debugging
  show_colored_trajectory(NUMBER_OF_ROBOTS)

  # Set first search position
  sample_next_position()

  # Set initial state
  current_state = STATE_SEARCH
  found_gps = {.x = 0, .y = 0}
  
  init_stigmergies()
  init_listeners()
}

# Sample new position for search depending on the search algorithm
function search() {
  if (SEARCH_TYPE == 1) {
    random_belief_search()
  } else {
    random_search()
  }
}

function move_to_found_state() {
  update_belief(0)
  found_gps.x = gps_position.x
  found_gps.y = gps_position.y
  current_search_step = 0  
  current_state = STATE_FOUND
}

function move_to_search_state() {
  search()
  current_state = STATE_SEARCH
}

function search_state() {
  debug.print("Searching")
  # Look if a target is discovered
  if ( has_discovered_target() != 0 ) { 
    move_to_found_state()    
  } 
  # If the max number of search step is reached go back to meeting point
  else if ( current_search_step >= NUMBER_OF_SEARCH_STEP ){ 
    next_position = math.vec2.new(MEETING_POINT.x, MEETING_POINT.y)
    goto(next_position.x, next_position.y)
    current_state = STATE_MEETING
    current_search_step = 0
    update_belief(0)
  }
  # Else continue searching
  else { 
    update_belief(0)
    if ( has_reached(next_position.x, next_position.y, DELTA_REACHED_POS) != 0 )
    {
      search()
      current_search_step = current_search_step + 1
    } else {
      goto(next_position.x, next_position.y)
    }
  }
}

function found_state() {
  debug.print("Found the target")

  # Wait for ack from root if exists before leaving this state
  neighbors.listen(NEW_TARGET_ACK_EVENT, function(vid, value, rid) {
    if (value == id) {
      neighbors.ignore(NEW_TARGET_ACK_EVENT)
      move_to_search_state()
    }
  })

  if (is_new_target(found_gps) != 0) {
    # log("[", id, "] New target")
    var root_id = safe_stigmergy_get(root_id_stigmergy, "root_id", -1)
    # Go to meeting zone if not there already
    if ( has_reached(MEETING_POINT.x, MEETING_POINT.y, DELTA_REACHED_POS) == 0) {
      goto(MEETING_POINT.x, MEETING_POINT.y)
      return
    }
    # We reached meeting zone
    if (root_id == -1) { # If no root exists, this drone is the root
      current_state =  STATE_ROOT
      root_id_stigmergy.put("root_id", id)
      found_targets[size(found_targets)] = {.processed = 0, .position = found_gps}
      target_stigmergy.put("found_targets", found_targets)
      return
    }
    neighbors.broadcast(NEW_TARGET_EVENT, found_gps)
  } else {
    move_to_search_state()
  }
}

function root_state() {
  debug.print("Root")

  neighbors.ignore(NETWORKERS_NEEDED_EVENT)
  # Listen to broadcast for new_target
  neighbors.listen(NEW_TARGET_EVENT, function(vid, new_target_position, rid) {
    neighbors.broadcast(NEW_TARGET_ACK_EVENT, rid)
    var new_candidate = new_target_position
    if(is_new_target(new_candidate)) {
      # Add it to targets stack and update stigmergy
      found_targets[size(found_targets)] = {.processed = 0, .position = new_candidate}
      target_stigmergy.put("found_targets", found_targets)
      if (size(found_targets) == NUMBER_OF_TARGETS) {
        log_metrics(nb_step, STATE_FOUND, 0)
      }
    }
  })

  # log("Number target = ", size(found_targets))

  var root_id = safe_stigmergy_get(root_id_stigmergy, "root_id", -1)
  if (root_id != id) {
    move_to_search_state()
    neighbors.ignore(NEW_TARGET_EVENT)
    neighbors.broadcast(NEW_TARGET_EVENT, found_gps)
    neighbors.ignore(BIDDING_VALUE_EVENT)
    init_listeners()
    return
  }

  # Process next target
  if (size(current_target) == 0) {
    # log("NO CURRENT TARGET")
    var i = 0
    var continue = 1
    while(i < size(found_targets) and continue == 1) {
      if (found_targets[i].processed == 0) {
        current_target = found_targets[i].position
        found_targets[i].processed = 1
        continue = 0
      }
      i = i + 1
    }
  }

  if (size(found_targets) == NUMBER_OF_TARGETS and size(current_target) == 0) {
    if (state_duration > 15) {
      experiment_done()
    } else {
      state_duration = state_duration + 1
    }
  }

  # Create stack points for Networkers
  if (size(current_target) != 0) {
    # log("CURRENT TARG: ", current_target.x, ", ", current_target.y)
    if (size(networkers_positions) == 0) {
      # log("NO NETWORKERS LIST")
      networkers_positions = get_networkers_positions(current_target)
      initial_nb_networkers = size(networkers_positions)
    }

    # If unassigned position in stack
    if (size(cur_bid_info.position) == 0) {
      var i = 0
      var continue = 1
      while(i < initial_nb_networkers and continue == 1) {
        if (networkers_positions[i] != nil) {
          cur_bid_info.position = networkers_positions[i]
          current_best_bid = {.value = -1.0, .rid = -1}
          cur_bid_info.id_bid = cur_bid_info.id_bid + 1
          networkers_positions[i] = nil
          continue = 0
        }
        i = i + 1
      }
      # No more positions for this target
      if (size(networkers_positions) == 0) {
        # log("Processed")
        current_target = {}
        initial_nb_networkers = -1
      }
    }
    if (size(cur_bid_info.position) != 0) {
      current_state = STATE_AUCTIONEER 
    }
  }
}

function auctionner_state() {
  debug.print("Auctioneer")
  # Listen to networker bid
  neighbors.listen(BIDDING_VALUE_EVENT, function(vid, info_bid, rid) {
    # get bid value
    if (current_best_bid.value < info_bid.value and info_bid.id_bid == cur_bid_info.id_bid) {
      current_best_bid.value = info_bid.value
      current_best_bid.rid = rid
    }
  })
  # Listen to winner acknowledgment
  neighbors.listen(WINNER_ACK_EVENT, function(vid, winner_id, rid) {
    if (current_best_bid.rid == winner_id) {
    # log("[", id, "] Winner ACK", winner_id, "Cur_bid", current_best_bid.rid)
      winners_acks[cur_bid_info.id_bid] = winner_id
      if (current_state == STATE_AUCTIONEER) {
        state_duration = 0
        current_state = STATE_ROOT
        # log("---- Back from auction ----")
        cur_bid_info.position = {}
        count_broadcast_winner = 0
        count_broadcast = 0
        neighbors.ignore(WINNER_ACK_EVENT)
      }
    }
  })

  var root_id = safe_stigmergy_get(root_id_stigmergy, "root_id", -1)
  if (root_id != id) {
    current_state =  STATE_ROOT
    return
  }

  # Broadcast networker_needed with position
  if (count_broadcast < MAX_BROADCAST_STEP or current_best_bid.rid == -1) {
    cur_bid_info.last = size(networkers_positions)
    neighbors.broadcast(NETWORKERS_NEEDED_EVENT, { .position = cur_bid_info.position, .id_bid = cur_bid_info.id_bid, .last = cur_bid_info.last})
    count_broadcast = count_broadcast + 1
  } else { # Broadcast winner after a 10 steps
    neighbors.ignore(BIDDING_VALUE_EVENT)
    if (count_broadcast_winner < MAX_BROADCAST_STEP) {
      neighbors.broadcast(BID_WINNER_EVENT, current_best_bid.rid)
      # log(" Winner is: ", current_best_bid.rid)
      count_broadcast_winner = count_broadcast_winner + 1
    } else {
      # log("Continue bidding")
      cur_bid_info.id_bid = cur_bid_info.id_bid + 1
      count_broadcast_winner = 0
      count_broadcast = 0
      current_best_bid = {.value = -1.0, .rid = -1}
    }
  }
}

function meeting_state() {
  debug.print("Periodic meeting")
  # Update local list of targets
  if ( has_reached(MEETING_POINT.x, MEETING_POINT.y, DELTA_REACHED_POS) == 0 ) {
    # Look for targets when comming back to meeting point
    if ( has_discovered_target() != 0 ) { 
      move_to_found_state()     
    } else {
      update_belief(0)
    }
  }
  # When we get to the meeting point go back to searching when no networkers are needed
  else {
    move_to_search_state()
  }
}

function networker_bidding_state() {
  debug.print("Networker bidding")
  # Listen to winner 
  neighbors.listen(BID_WINNER_EVENT, function(vid, winner_id, rid) {
    state_duration = 0
    if (winner_id == id) {
      current_state = STATE_NETWORKER
      neighbors.ignore(NETWORKERS_NEEDED_EVENT)
    } else if (cur_bid_info.last == 0) {
      move_to_search_state()
      cur_bid_info.position = {}
    } else {
      current_state = STATE_WAIT_FOR_BID
      cur_bid_info.position = {}
    }
    neighbors.ignore(BID_WINNER_EVENT)
  })
  if (has_reached(next_position.x, next_position.y, DELTA_REACHED_POS) == 0) {
    return
  }
  
  if (distance_v2(math.vec2.new(MEETING_POINT.x, MEETING_POINT.y) , gps_position) > COMMUNICATION_RANGE) {
    move_to_search_state()
    neighbors.ignore(BID_WINNER_EVENT)
    return
  }

  if (state_duration < 30) {
    var r_bid = get_bid(cur_bid_info.position)
    neighbors.broadcast(BIDDING_VALUE_EVENT, {.id_bid = cur_bid_info.id_bid, .value = r_bid})
    state_duration = state_duration + 1
  } else {
    state_duration = 0
    move_to_search_state()
    cur_bid_info.position = {}
    neighbors.ignore(BID_WINNER_EVENT)
  }
}

function wait_for_bid_state() {
  debug.print("Waiting for bid")
  if (state_duration > 10) {
    move_to_search_state()
    state_duration = 0
  } else {
    state_duration = state_duration + 1
  }
}

function networker_state() {
  debug.print("Networker (", cur_bid_info.position.x, ", ", cur_bid_info.position.y, ")")
  if (state_duration < 5) {
    neighbors.broadcast(WINNER_ACK_EVENT, id)
    state_duration = state_duration + 1
  } else {
    goto(cur_bid_info.position.x, cur_bid_info.position.y)
    if (has_reached(cur_bid_info.position.x, cur_bid_info.position.y, DELTA_REACHED_POS) == 1 and waiting_log == 1) {
      log_metrics(nb_step, STATE_NETWORKER, cur_bid_info.last)
      waiting_log = 0
    }
  }
}

# Executed every time step
function step() {
  update_gps_position()
  nb_step = nb_step + 1
  
  # Get latest targets list
  found_targets = safe_stigmergy_get(target_stigmergy, "found_targets", found_targets)
  # Log datasize info
  # log_metrics(nb_step, -1, 0)
  
  if (current_state == STATE_SEARCH) { 
    search_state()
  } else if (current_state == STATE_FOUND) { 
    found_state()
  } else if (current_state == STATE_ROOT) {
    root_state()
  } else if (current_state == STATE_MEETING) { 
    meeting_state()
  } else if (current_state == STATE_NETWORKER_BIDDING) {
    networker_bidding_state()
  } else if (current_state == STATE_WAIT_FOR_BID) {
    wait_for_bid_state()
  } else if (current_state == STATE_NETWORKER) {
    networker_state()
  } else if (current_state == STATE_AUCTIONEER) {
    auctionner_state()
  }
}
 
# Execute at exit
function destroy() {
}
