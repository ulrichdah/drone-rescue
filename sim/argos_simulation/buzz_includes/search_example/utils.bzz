include "buzz_includes/search_example/global_variables.bzz"
include "buzz_includes/buzz_utils/vec2.bzz"
include "buzz_includes/debug.bzz"

# Sample a random position
function sample_next_position() {
  next_position.x = uniform(SEARCH_SPACE.minx, SEARCH_SPACE.maxx)
  next_position.y = uniform(SEARCH_SPACE.miny, SEARCH_SPACE.maxy)
}

# Random walk search
function random_search() { 
  sample_next_position()
  goto(next_position.x, next_position.y)
}

# Round the float value to the nearest integer
function round_to_nearest(value) {
  if (value > int(value) + 0.5) {
    return int(value) + 1
  } else {
    return int(value)
  }
}

# Log metrics for results
function log_metrics(step, state, last_networker) {
  if (state == STATE_FOUND) {
    log_found_target(step, id)
  } else if (state == STATE_NETWORKER) {
    log_relay(step, id, last_networker)
  } else if (debug.msgqueue != nil) {
    if (current_state == STATE_ROOT or current_state == STATE_AUCTIONEER) {
      log_datasize(step, -1, debug.msgqueue.total)
    } else {
      log_datasize(step, id, debug.msgqueue.total)
    }
  }
}

# Check if a target is in sight
function has_discovered_target()
{ 
  return detect_targets()
}

# Returns difference between two vec2
function distance_v2(v1, v2) {
  return math.vec2.length(math.vec2.sub(v1, v2))   
}

# Check if given target position was already found
function is_new_target(target_position) {
  for (i = 0, i < size(found_targets), i = i + 1) {
    var existing_target_pos = found_targets[i].position
    var difference = distance_v2(existing_target_pos, target_position) 
    if (difference <= 5.0) {
      return 0
    }
  }
  return 1
}

# Check if a target was already processed (at least one existing relay)
function get_nearest_vertex(target_position) {
  var nearest_vertex = math.vec2.new(MEETING_POINT.x, MEETING_POINT.y) 
  var nearest_distance = distance_v2(nearest_vertex, target_position)
  for (i = 0, i < size(graph), i = i + 1) {
    if (distance_v2(graph[i], target_position) < nearest_distance) {
      nearest_vertex = graph[i]
      nearest_distance = distance_v2(graph[i], target_position)
    }
  }
  return nearest_vertex
}

# Returns a list of networkers positions for a given target
function get_networkers_positions(target_position) {
  var start = get_nearest_vertex(target_position)
  var distance = math.vec2.length(math.vec2.sub(target_position, start))
  var unit_direction = math.vec2.norm(math.vec2.sub(target_position, start))
  var nb_networkers = int(distance / COMMUNICATION_RANGE)
  if (distance % COMMUNICATION_RANGE != 0) {
    nb_networkers = nb_networkers + 1
  }
  # log("Nb networker:", nb_networkers)
  var positions = {}
  for (i = 0, i < nb_networkers - 1, i = i + 1) {
    var new_pos = {.x = unit_direction.x * COMMUNICATION_RANGE * (i +1), .y = unit_direction.y * COMMUNICATION_RANGE * (i + 1)}
    positions[i] = math.vec2.add(start, new_pos)
    graph[size(graph)] = positions[i]
    # log("Networker", i, ":", positions[i].x, ", ", positions[i].y)
  }
  positions[(nb_networkers - 1)] = target_position
  # log("Networker", (nb_networkers - 1), ":", positions[(nb_networkers - 1)].x, ", ", positions[(nb_networkers - 1)].y)
  graph[size(graph)] = target_position
  return positions
}

# Returns a bid value based on the distance from the given position
function get_bid(position) {
  var distance = distance_v2(position, gps_position)
  return 1 / distance
}

function safe_stigmergy_get(v_stigmergy, key, default) {
  var tmp = v_stigmergy.get(key)
  if (tmp != nil) {
    return tmp
  } else {
    return default
  }
}