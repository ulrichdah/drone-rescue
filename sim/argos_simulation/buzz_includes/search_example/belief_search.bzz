include "buzz_includes/search_example/utils.bzz"
include "buzz_includes/buzz_utils/string.bzz"

INF_FLOAT = 500.0
MAX_NB_TRY = 100

function get_best_belief(x, y) {
  var next_position_key = string.concat(string.tostring(round_to_nearest(x)), "_", string.tostring(round_to_nearest(y)))
  var result = get_belief(x, y)
  if (map_stigmergy.get(next_position_key) != nil) {
    result = map_stigmergy.get(next_position_key)
  }
  return result
}

# Random belief map search
function random_belief_search() { 
  sample_next_position(0)
  var nb_try = 0
  var candidate_belief = get_best_belief(next_position.x, next_position.y)
  var cur_best_belief = -INF_FLOAT
  var cur_best_position = {.x = 0.0, .y = 0.0}
  while (candidate_belief < 0.1 and nb_try < MAX_NB_TRY) { 
    if (candidate_belief > cur_best_belief) {
      cur_best_belief = candidate_belief
      cur_best_position.x = next_position.x
      cur_best_position.y = next_position.y
    }
    nb_try = nb_try + 1
    sample_next_position(0)
    candidate_belief = get_best_belief(next_position.x, next_position.y)
  }
  goto(next_position.x, next_position.y)
}


# Update the belief based on presence/abscence of the target
function update_belief(is_present) {
  if (SEARCH_TYPE == 1) {
    var current_belief = get_best_belief(gps_position.x, gps_position.y)
    var new_value = current_belief
    if (is_present > 0) {
      new_value = math.min(current_belief * (1 + PROB_DETECTION), 1.0)
    } else {
      new_value = math.max(current_belief * (1 - PROB_DETECTION), 0.0)
    }
    current_key = get_current_key()
    map_stigmergy.put(current_key, new_value)
  }
}